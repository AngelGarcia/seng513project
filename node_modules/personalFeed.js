/* personalFeed.js 
 * Provides a page with recent events on the site. Users who are logged in see a personal feed.  
 */ 

var dbAccess = require('dbAccess'),
	dateUtil = require('dateUtil'),
	recentActivity = require('recentActivity'), 
	step = require('step'),
	stringUtil = require('stringUtil'), 
	util = require('util');
	
var NUM_ACTIVITIES = 20; // The number of activites to show 

/* generatePersonalFeed
 * Produces the response for a personal feed when a user is logged in 
 * Shows a feed of the latest issues and comments based on the user's interest and alocation
 * 
 * 'res' A node http response object 
 * 'user' The user 
 */ 
function generatePersonalFeed(res, user) {
	recentActivity.getUserRecentActivityList(user.id, NUM_ACTIVITIES, function(error, results) {
		step(
			function loadData() {
				var issueAuthorIds = []; 
				var commentAuthorIds = []; 
				for (r in results) {
					switch (results[r].type) { 
						case ('issue'): 
							issueAuthorIds.push(results[r].contents.user_id);
							break;
						case ('comment'): 
							commentAuthorIds.push(results[r].contents.user_id);
							break; 
						default: 
							break; 
					}
				}
				getUserNames(issueAuthorIds, this.parallel());
				getUserNames(commentAuthorIds, this.parallel()); 
			},
			function handleCallback(err, issueAuthors, commentAuthors) {
				if (err) throw error;
				
				res.writeHead(200, {"Content-Type": "text/html"});
				res.write('<!doctype html> <html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>');
				res.write('<title>CivicConnect</title><link rel="stylesheet" href="css/style.css" type="text/css" /></head>');
				res.write('<body><div id="page"><div id="header"><a href="signup.html">join</a> | <a href="signin">login</a> </div> <div id="menu"><ul><li><a href="index.html">Home</a></li><li><a href="about.html">About</a></li></ul></div><div id="content">');
				
				res.write('<h1>Personal Feed</h1>');
				res.write('<table>'); 
				
				var currentDate = new Date(); 
				for (r in results) { 
					res.write('<tr><td>');
					if (results[r].type == 'issue') { 
						res.write('Issue: <a href="' + '/viewIssue?id=' + results[r].contents.id + '">' + results[r].contents.title.abbreviate(60) + '</a>'); 
						res.write('<p>by: ' + issueAuthors[results[r].contents.user_id] + ' (' + currentDate.howLongAgo(results[r].contents.created) + ')</p><br />'); 
					}
					if (results[r].type == 'comment') {
						res.write('<p>Comment: ' + '<a href="' + '/viewIssue?id=' + results[r].contents.issue_id + '">' + commentAuthors[results[r].contents.user_id] + ' (' + currentDate.howLongAgo(results[r].contents.created) + ')</a><br />'); 
					}
					res.write('<tr></td>'); 
				}
				res.write('</table>'); 
				res.write('</div><div id="footer"><p>&copy; 2011 University of Calgary. All rights reserved.</p></div></div></body> </html>');
				res.end(); 
			}
		);
	}); 
}

/* generateRecentActivityFeed
 * Produces the response for when a user is not logged in. 
 * Shows a feed of the latest issues and comments 
 * 
 * 'res' A node http response object 
 */ 
function generateRecentActivityFeed(res) {
	recentActivity.getRecentActivityList(NUM_ACTIVITIES, function(error, results) {
		step(
			function loadData() {
				var issueAuthorIds = []; 
				var commentAuthorIds = []; 
				for (r in results) {
					switch (results[r].type) { 
						case ('issue'): 
							issueAuthorIds.push(results[r].contents.user_id);
							break;
						case ('comment'): 
							commentAuthorIds.push(results[r].contents.user_id);
							break; 
						default: 
							break; 
					}
				}
				getUserNames(issueAuthorIds, this.parallel());
				getUserNames(commentAuthorIds, this.parallel()); 
			},
			function handleCallback(err, issueAuthors, commentAuthors) {
				if (err) throw error;
				
				res.writeHead(200, {"Content-Type": "text/html"});
				res.write('<!doctype html> <html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>');
				res.write('<title>CivicConnect</title><link rel="stylesheet" href="css/style.css" type="text/css" /></head>');
				res.write('<body><div id="page"><div id="header"><a href="signup.html">join</a> | <a href="signin">login</a> </div> <div id="menu"><ul><li><a href="index.html">Home</a></li><li><a href="about.html">About</a></li></ul></div><div id="content">');
				
				res.write('<h1>Personal Feed</h1>');
				res.write('<table>'); 
				
				var currentDate = new Date(); 
				for (r in results) { 
					res.write('<tr><td>');
					if (results[r].type == 'issue') { 
						var issueTitle = (results[r].contents.title) ? results[r].contents.title.abbreviate(60) : ''; 
						res.write('Issue: <a href="' + '/viewIssue?id=' + results[r].contents.id + '">' + issueTitle + '</a>'); 
						res.write('<p>by: ' + issueAuthors[results[r].contents.user_id] + ' ' + currentDate.howLongAgo(results[r].contents.created) + '</p><br />'); 
					}
					if (results[r].type == 'comment') { 
						res.write('Comment: ' + '<a href="' + '/viewIssue?id=' + results[r].contents.issue_id + '">' + commentAuthors[results[r].contents.user_id] + ' ' + currentDate.howLongAgo(results[r].contents.created) + '</a><br />'); 
					}
					res.write('<tr></td>'); 
				}
				res.write('</table>'); 
				res.write('</div><div id="footer"><p>&copy; 2011 University of Calgary. All rights reserved.</p></div></div></body> </html>');
				res.end(); 
			}
		);
	}); 
}

/* getUserNames  
 * Gets the names of users based off a list of user ids 
 * 
 * 'userIds' A list of users ids 
 * 'callback' A callback (error, results) where results is an array with user names 
 *
 * TODO: Improve the performance and efficiency of this function 
 */ 
function getUserNames(userIds, callback) {
	var names = []; 
	dbAccess.find('users', { properties : [ 'id', 'name' ] }, function(error, results) {
		for (r in results) { 
			if (contains(userIds, results[r].id)) { 
				names[new String(results[r].id)] = (results[r].name); 
			}
		}
		callback(error, names); 
	});
}

/* contains 
 * Checks if an array contains an object 
 * 
 * 'a' The array 
 * 'obj' The object to look for in the array 
 */ 
function contains(a, obj) {
	var i = a.length;
	while (i--) {
		if (a[i] === obj) {
			return true;
		}
	}
	return false;
}

/* display 
 * Determines what to render 
 *
 * 'req' A node http request object 
 * 'res' A node http response object 
 */ 
exports.display = function(req, res) {
	req.getUser(function(error, user) {
		if (error) throw error;
		if (user) { 
			generatePersonalFeed(res, user);  
		}
		else {
			generateRecentActivityFeed(res); 
		}
	}); 	
}
