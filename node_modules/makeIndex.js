/* makeIndex.js
 *
 * Authors:
 * - Russ
 * - Andrew
 *
 * Desc:
 *	Helper module to create indices into table for faster searching given a list of keywords
 *
 * How to use:
 *	Everything is done automatically, upon insert using dbAccess.create, a trap is deployed to call this module when
 *  and issue is created.
 *
 */
var sqlite = require('sqlite');
	db = new sqlite.Database();
	qs = require('querystring');
	util = require('util');
	DATABASE_NAME = 'CivicConnect.db';

// ARRAY(words) ------> into indexes (if not already exist)
exports.insertIndex = function (keywords, issueId){
	// insert indices
	db.open(DATABASE_NAME, function(open_error) {
		for (var i in keywords){
			handleKeyword(keywords[i], issueId);
		}
	})
}

function handleKeyword(keyword, issueId)
{
	var insertquery = "INSERT INTO keywords (keyword) VALUES ('"+keyword+"')";
	db.execute(insertquery, function(error, insres1){
		findKey(keyword, issueId);
	})
}

function findKey(keyword, issueId)
{
	var query = "SELECT * FROM keywords WHERE keyword='"+keyword+"'";
	console.log("- - - Checking for existing keyword: "+keyword);
	db.execute(query, function(error, results){
	// no existing keyword
		if (results[0]==undefined){
			// not suppose to go in here
		} else if (results[0]!=undefined){
			console.log("- - - - Found @ "+results[0].id);
			var keywordId = results[0].id;
			insertIt(keywordId, issueId);
		}
	})
}

function insertIt(keywordId, issueId)
{
	var insertquery2 = "INSERT INTO indexTable (keyword_id, issue_id) VALUES ('"+keywordId+"','"+issueId+"')";
	db.execute(insertquery2, function(error){
		console.log("- - - INSERTED: ("+keywordId+" "+issueId+")");
	})
}

// PARAGRAPH -----> ARRAY(words) that meets min_chars requirement
exports.parse = function (text){
	// minimum number of letters(chars) to be considered into the array
	var MIN_CHARS = 3;
	
	// burst the text into arrays of single words
	var text2 = text.replace(/\"/g, "");

	var words = text2.split(" ");
	var selectwords = new Array();
	
	// screen the words, if length>=min_chars, then add to selectwords
	// also check for any special character
	for (var i in words){
		if (words[i].length>=MIN_CHARS){
			var thisWord = words[i].replace(/[^A-Za-z0-9]/g,'');
			selectwords.push(thisWord.toLowerCase());
		}
	}
	
	return selectwords;
}