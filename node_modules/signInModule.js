var util = require('util'),
fs = require('fs'),
user = require('user'),
dbAccess = require('./dbAccess'),
queryString = require('querystring');

var user = require('user');
var view = 'views/signIn.html';

function render(view, res){
	util.pump(fs.createReadStream(view), res, function(err){
		if(err)
			throw err;
	});
}

// Parses the giving url string and sets the params to the corresponding values.
var parseGETParameters = function(url){
	questionMarkIndex = url.indexOf('?');
	if(questionMarkIndex == -1)
		return;
	return queryString.parse(url.slice(questionMarkIndex + 1));
}

redirectTo = function (res, route){
	res.statusCode = 302;
	res.setHeader('Location', route);
	res.end();
}

exports.signin = function(req, res){
	if(req.method != 'POST'){
		res.render(view);
		return;
	}
		
	req.content = '';
	
	req.on('data', function(chunk){
		req.content += chunk;
	})
	
	req.on('end', function(){
		req.params = queryString.parse(req.content);
		
		var params = req.params
		
		user.authenticate(params.username, params.password, function (error, user){
			
			if(error)
				throw error;
			
			if(user){
				// For now this just uses the user id as the session id.
				// It works but, is a security flaw.
				var sessionString = generateHash(user.id);
				var query = "INSERT INTO sessions (user_id, session_hash) VALUES ('"+user.id+"','"+sessionString+"');";
	
				dbAccess.runQuery(query, function(error){
					res.setHeader('Set-Cookie', 'session=' + sessionString); // TODO: look into setting real session id's
					redirectTo(res, '/'); // redirect to index.
				});
				
			}else{
				res.render(view, {error: 'Sign In Failed. Please try again.'});
			}
		
		})
	})
}

function generateHash(id){
	var timestamp = new Date().getTime();
	var toHash = timestamp+id;
	return user.md5hash(toHash);
}

exports.signout = function(req, res){
	res.setHeader('Set-Cookie', 'session=' + 0 + ';Expires=Thu, 01-Jan-1970 00:00:01 GMT');
	redirectTo(res, '/');
}

