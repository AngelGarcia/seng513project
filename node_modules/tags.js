/* tags.js 
 *
 * Provides functions for tagging issues
 * Dori Saba
 * sabad66@hotmail.com
 * March 3, 2011
 *
 * Future: Right now, it can only handle one-word tags. So 'tag1 tag2' will be two tags: ['tag1', 'tag2']
 * Eventually, would like to have it so that you can have more than one word tags ie 'tag1 "le tag" tag3'
 * would be ['tag1', 'le tag', 'tag2']. Currently, it would parse to: ['tag1', '"le', 'tag"', 'tag3']
 */
 
var dbAccess = require('dbAccess'),
	sqlite = require('sqlite');
	//wordFilter = require('wordFilter');

var MAXTAGS = 20; // Set a maximum of 20 tags per issue

/* tagIssue
 * Gets the reputation score of a specified user 
 *
 * 'userId' The id of the user 
 * 'call_back' The call back function which returns the reputation score of the user 
 */
exports.tagIssue = function(issueId, tags) {
	// First we need to check if we have a valid issueId
}

/* parseTags
 * Parses the space separated string of tags and returns a list of tags
 * 
 * 'tags' The string of tags that the user entered
 */
exports.parseTags = function(tags) {
	return tags.split(' ', MAXTAGS);
}

/* validIssue
 * Checks to see if we have a valid issue id
 * 
 * 'issueId' is the id we are checking
 */
exports.validIssue = function(issueId) {
	// Open the connection to the database
	var db = sqlite.Database();
	db.open("CivicConnect.db", function (error) {
		if (error) {
			util.log("error opening db: " + error);
			throw error;
		}
		// Get the id of the last item inserted
		db.execute("SELECT * FROM issues WHERE id = " + issueId + ";", function (error, rows) {
			if (error) {
				util.log(error);
				throw error;
			}
			util.log(rows.length);
			// Close the connection to the DB
			db.close(function (error) {});
			if (rows.length != 1)
				return false;
			return true;
		});
	});
}
