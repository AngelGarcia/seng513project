var dbAccess = require('dbAccess'), 
	url = require('url'),
	querystring = require('querystring'),
	reputation = require('reputation'), 
	url = require('url');

var g_UserId = -1;
var g_UserVote; 
var thisIssueId;

var ViewIssue = exports.ViewIssue = function() {
};

/**
* Send the HTML page to the client
* @param response Response object to send the data
* @param issue Issue to display
*/
function displayPage(response, issue) {
	return function(error, users) {
		thisIssueId = issue['id'];
		
		// query view count and update it for current issue
		var sqlViewCount =  "SELECT views FROM issues WHERE id = " + thisIssueId;
		dbAccess.runQuery(sqlViewCount, function(error, views) {
			if (error) throw error;
		
			var viewcount = views[0]['views'];
			if (!viewcount)
				viewcount = 1;
			else
				viewcount += 1;
				
			dbAccess.update('issues', { values:[ 'views="' + viewcount + '"' ], 
			conditions:['id="' + thisIssueId + '"'] }, function(error) { 
			if (error) throw error;
			}); 
		});
		
		var user = users[0];

		g_UserVote = -1; //Assume that the user hasn't voted initially

		//Check if the user has already voted
		var sqlAlreadyVoted = "SELECT * FROM votes WHERE user_id = " + g_UserId + " AND issue_id = " + issue['id'];

		dbAccess.runQuery(sqlAlreadyVoted, function(error, rows_vote) {
			if (error) throw error;
			if (rows_vote.length == 1) {
				g_UserVote = rows_vote[0]['vote'];
			}

			var sqlQuery = "SELECT content,user_id,created FROM comments WHERE issue_id=" + thisIssueId;
			dbAccess.runQuery(sqlQuery, function (error, rows) {
				if (error) throw error;

				var sqlQuery2 = "SELECT id,name FROM users";
				dbAccess.runQuery(sqlQuery2, function (error, rows2) {
					if (error) throw error;

					contentArray = []; 

					if (rows.length > 0) {
						var name = "";
						for (var i = rows.length - 1; i >= 0; i--) {
							for (var j = rows2.length - 1; j >= 0; j--) {
								if (rows2[j].id == rows[i].user_id) {
									name = rows2[j].name;
									break;
								}
							}
							var obj = {
								iCommentCreatorId : rows[i].user_id,
								iCommentCreatorName : name,
								iCommentCreatedTime : rows[i].created,
								iCommentContent : rows[i].content
							};
							contentArray.push(obj);
						}
					}
					getStats(thisIssueId, function(issueStats){
						variables = {
							found: true,
							quickTaskButtons_partial: 'views/layouts/partials/quickTaskButtons_partial.html',
							quickTaskButtons: {id: issue.id},
							title: issue.title,
							created: issue.created,
							user: user,
							user_id: user.id,
							user_name: user.name,
							status: issue.status,
							location: issue.location,
							description: issue.description,
							link: issue.link,
							issue_id: issue.id,
							userHasVoted: g_UserVote != -1,
							userLiked: g_UserVote == 0,
							comments: contentArray,
							// vars for issue stats
							lastModified: issue.lastModified,
							numComments: issueStats[0],
							numFollowers: issueStats[1],
							numViews: issueStats[2]
						
						}
						response.render('views/viewIssue.html', variables);
					}); // end of queries of issue stats
				});
			});
		});
   };
}

/**
* Queries the DB for issue statistics such as number of comments, followers, and views
* @param thisIssueId Current issue
*/
function getStats(thisIssueId, callback) {

	// find number of followers
	var queryFollowers= "SELECT count (*) FROM follows WHERE issue_id = " + thisIssueId;
	// find number of comments
	var queryComments= "SELECT count (*) FROM comments  WHERE issue_id = " + thisIssueId;
	// find view count
	var queryViews= "SELECT views FROM issues WHERE id = " + thisIssueId;
	
	 dbAccess.runQuery(queryFollowers, function (error, followers) {
		if (error) throw error;
			dbAccess.runQuery(queryComments, function (error, comments) {
				if (error) throw error;
					dbAccess.runQuery(queryViews, function (error, views) {
						if (error) throw error;
						
						var stat;
						var issueStats = [0,0,0];
	
						issueStats[0] = comments[0]['count (*)'];
						issueStats[1] = followers[0]['count (*)'];
						issueStats[2] = views[0]['views'];
						
					if (callback instanceof Function) { callback(issueStats); } 
					});
			});
		});
		
}

 
ViewIssue.addcomments = function (req,res) {
	var requestString = "";

	if (g_UserId == -1) {
		res.statusCode = 302;
		res.setHeader('Location', '/signin');
		res.end();
	}
	else {
		req.on('data', function (chunk) {
			requestString = requestString+chunk;
		});
		req.on('end', function() {
			var decodedBody = querystring.parse(requestString);
			var sqlQuery = "INSERT INTO comments (id,user_id,issue_id,content) VALUES ("
			+ null + ",'"
			+ g_UserId + "','"
			+ thisIssueId + "','"
			+ decodedBody.comments
			+ "')";
			dbAccess.runQuery(sqlQuery, function (error, rows) {
				if(error) throw error;
				res.statusCode = 302;
				res.setHeader('Location', '/viewIssue?id=' + thisIssueId);
				res.end();
			});
			
			reputation.updateOnAddComment(thisIssueId, g_UserId, decodedBody.comments); 
		});
	}
}

/**
* Retrieve the user corresponding to the issue
* @param response Response object to send the data
*/
function findIssueCreator(response, issueId) {
	return function(error, rows) {
		if (error) throw error;
		var issue = rows[0];

		if(issue == undefined) {
			variables = { found: false, issue_id: issueId }
			response.render('views/viewIssue.html', variables);
		}
		else
			dbAccess.runQuery('SELECT * FROM users WHERE id=' + issue['user_id'], displayPage(response, issue));
	};
}

/**
* Main function of the module
* @param request Incoming request
* @param response Response object to send the data
*/
ViewIssue.display = function(request, response) {
	var parsedURL = url.parse(request.url, true);

	// Check to see if we have an issue id from the url
	if (!parsedURL.query.id) {
		// If not, we'll render the page now
		var variables = {
			found: false,
			issue_id: 'null'
		};
		response.render('views/viewIssue.html', variables);
	}
	else {
		// Otherwise, we can proceed normally
		var issueId = parsedURL.query.id;
		request.getUser(function(error, user) {
			if (error) {
				util.log('Error getting current user in viewIssue.display. ' + error);
				var variables = {
					error: 'Internal Server Error: Error retrieving current user'
				};
				response.render('views/viewIssue.html', variables);
			}
			if (user) g_UserId = user.id;
			var sqlQuery = "SELECT * FROM issues WHERE id='" + issueId + "';";
			dbAccess.runQuery(sqlQuery, findIssueCreator(response, issueId));
		});
	}
};
