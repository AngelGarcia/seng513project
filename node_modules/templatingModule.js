Mustache = require('mustache'),
fs = require('fs');

var layoutsPath = 'views/layouts/';
var defaultLayoutPath = layoutsPath + 'defaultLayout.html';
var defaultPageTitle = 'CivicConnect';
var defaultQuickTaskButtons = 'views/layouts/defaultQuickTaskButtons_partial.html';

/*
 * This method is intended to be added to the http.Response ojbect.  
 */
exports.render = function(template, view, partials, send_fun){
	res = this;
	view = view || {}; //Removes the need to pass in the 'view' argument.
	
	// TODO: Is it OK to assume 'text/html' at this point?
	res.setHeader('Content-Type', 'text/html');
	
	fs.readFile(template, function(error, contentData){
		if(error)
			throw error;
		
		contentHTML = Mustache.to_html(contentData.toString(), view, partials, send_fun);
		
		// TODO: don't like nesting file IO's. Can we do these in parallel?
		//		If implemented in parallel would we have a race condition?
		//		Or better yet, consider keeping the layout files in memory.
		fs.readFile(defaultLayoutPath, function(error, layoutData){
			if(error)
				throw error;
			
			quickTaskButtons_partial = view.quickTaskButtons_partial || defaultQuickTaskButtons;
			
			fs.readFile(quickTaskButtons_partial, function(error, partialData){
			
				if(error)
					throw error
				
				res.request.getUser(function(error, user){
					if(error)
						throw error
					
					layoutPartials = {}
					layoutPartials.quickTaskButtons = partialData.toString();

					layoutContent = view.layoutContent || {};
					layoutContent.content = contentHTML.toString();
					layoutContent.user = view.user || user;
					layoutContent.error = view.error;
					layoutContent.pageTitle = layoutContent.pageTitle || view.pageTitle || defaultPageTitle;
					layoutContent.quickTaskButtons = view.quickTaskButtons;
					
					fullHTML = Mustache.to_html(layoutData.toString(), layoutContent, layoutPartials);

					res.write(fullHTML);
					res.end();
				});
			});	
		});
	});
}

/*
 * This method is intended to be added to the http.Response ojbect.  
 */
exports.redirectTo = function(route){
	this.statusCode = 302;
	this.setHeader('Location', route);
	this.end();
}