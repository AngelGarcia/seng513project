/* 
 * parseAddr.js
 * converting an address into a set of geographic coordinates (latitude, longitude)
 * using Google Maps service
 * By: Tony Cheng
 */

var http = require('http');

var geo = exports.geo = function() {
	this.latitude;
	this.longitude;
};

geo.prototype.set = function(lat, lng) {
	this.latitude = lat;
	this.longitude = lng;
};

/**
 * Core Function
 * This function has a callback that pass the returning result
 * (see bottom for example call)
 */
var geocode = exports.geocode = function(address, call_back) {
	// replacing spaces in the input with +'s to make it a valid url query
	var query = address.replace(/\s/gi, "+");
	console.log("query: "+query);
	// creating a node client and send request to Google Maps
	var client = http.createClient(80, 'maps.googleapis.com');
	var request = client.request('GET', "/maps/api/geocode/json?address="+query+"&sensor=false");
	request.end();
	var res = "", result = new geo();
	var end = false;
	// retriving feedback from Google Maps
	request.on('response', function (response) {
		response.on('data', function (chunk) {
			res += chunk;
		});
		response.on('end', function() {
			// rebuilding the string as an object
			res = eval('(' + res + ')');
			switch(res.status) {
				case "OK": 
				result.set(res.results[0].geometry.location.lat, res.results[0].geometry.location.lng);
				console.log("Parsing complete");
				break;
				case "ZERO_RESULTS": 
				console.log("no match found, parsing failed"); 
				result.set("", ""); 
				break;
				case "OVER_QUERY_LIMIT": 
				console.log("Too many queries today!"); 
				result.set("", ""); 
				break;
				default: 
				console.log("invalid input encountered!"); 
				result.set("", ""); 
			}
			//console.log("queryres= "+result);
			call_back(result); 
		});
	});
}
/* simple test calls */
/*
var reply;
geocode("#32 7205 4St. N.E. Calgary, AB, Canada", function(latlong)  {
	reply = latlong;
	console.log("lat: "+reply.latitude+" lng: "+reply.longitude);
});
*/