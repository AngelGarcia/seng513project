/* 
 * parseAddr.js
 * converting an address into a set of geographic coordinates (latitude, longitude)
 * using Google Maps service
 * By: Tony Cheng
 */

var http = require('http');

var geo = function() {
	this.latitude;
	this.longitude;
};

geo.prototype.set = function(lat, long) {
	this.latitude = lat;
	this.longitude = long;
};

/**
 * geocode 
 * Returns an object which contains the latitude and longitude of a specified address 
 *
 * 'address' The address string
 * 'callback' A callback with a location object which contains latitude and longitude for an address 
 * 
 * Example: 
 *   geocode("#32 7205 4St. N.E. Calgary, AB, Canada", function(location) {
 *     var lat = location.latitude; 
 *     var long = location.logitude; 
 *   });
 */
exports.geocode = function(address, callback) {
	// replace spaces in the input with +'s to make it a valid url query
	var query = address.replace(/\s+/ig, "+");
	result = new geo();
	getGeocode(query, function(res) {
		// rebuild the string as an object
		res = eval('(' + res + ')');	 
		switch(res.status) {
			case "OK":
				result.set(res.results[0].geometry.location.lat, res.results[0].geometry.location.lng);
				break;
			case "ZERO_RESULTS": 
				console.log('No match found.'); 
				result.set('', ''); 
				break;
			case "OVER_QUERY_LIMIT": 
				console.log('Query limit reached.'); 
				result.set('', ''); 
				break;
			default: 
				console.log('Failed to obtain results.'); 
				result.set('', ''); 
		}
		callback(result); 
	});
}

/* getGeocode
 * Sends a geocode query for an address to Google Maps and returns the response 
 * 
 * 'query' The query to send 
 * 'callback' The callback containing a response from Google Maps 
 */ 
function getGeocode(query, callback) { 
	var res = ''; 
	// create a client and send request to Google Maps
	var client = http.createClient(80, 'maps.googleapis.com');
	var request = client.request('GET', '/maps/api/geocode/json?address=' + query + '&sensor=false');
	request.end();
	
	request.on('response', function (response) {
		response.on('data', function (chunk) {
			res += chunk;
		});
		
		response.on('end', function() {
			callback(res); 
		}); 
	}); 	
} 
