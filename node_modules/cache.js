var Cache = exports.Cache = function() {
	this.items = {}; 
	this.count = 0; 
}

/* add
 * Adds a new object to the cache with the specified (unique) key 
 * 
 * 'key' The object key
 * 'obj' The object to add to the cache
 */ 
Cache.prototype.add = function(key, obj) {
	if (!Cache.prototype.contains.call(this, key)) {
		this.items[key] = { value: obj, time: new Date() }; 
		this.count++; 
	}
}

/* remove
 * Removes an object from the cache with the specified key 
 * 
 * 'key' The key of the object to remove 
 */ 
Cache.prototype.remove = function(key) {  
	if (Cache.prototype.contains.call(this, key)) { 
		delete this.items[key]; 
		this.count--; 
	}
}

/* get
 * Gets an object from the cache with the specified key
 * Returns undefined if object not found. 
 * 
 * 'key' The key of the object to get 
 */ 
Cache.prototype.get = function(key) { 
	return (Cache.prototype.contains.call(this, key)) ? this.items[key].value : undefined; 
}

/* contains
 * Check if the cache contains an object with the specified key 
 * 
 * 'key' The key of the object 
 */ 
Cache.prototype.contains = function(key) { 
	return (this.items[key] == undefined || this.items[key] == null) ? false : true;  
}

/* clear
 * Clears the entire cache contents 
 */ 
Cache.prototype.clear = function() {
	this.items = []; 
	this.count = 0; 
}
