/* funcTest.js 
 * Functional testing framework 
 * Send requests to server and determine if reponse is what is expected
 */ 
var http = require('http'),
	querystring = require('querystring'); 
	
var DEFAULT_SERVER_PORT = 8124; 
var DEFAULT_SERVER_IP = '127.0.0.1'; 

/* Client 
 * Creates a new client 
 * 
 * 'port' (Optional) The server port
 * 'ip' (Optional) The server ip address. 
 */ 
var Client = exports.Client = function(port, ip) {
	port = port || DEFAULT_SERVER_PORT;
	ip = ip || DEFAULT_SERVER_IP; 
	
	this.client = http.createClient(port, ip);
	this.cookie = null; 
}

/* clearCookie
 * Clears the client's stored cookies 
 */ 
Client.prototype.clearCookies = function() {
	this.cookie = null; 
}

/* isCookieExpired
 * Determines if a cookie is expired 
 */ 
Client.prototype.isCookieExpired = function(cookie) { 
	cookie = cookie.toString();   
	var props = cookie.split(';');
	for (i in props) { 
		var pair = props[i].split('='); 
		if (pair[0].toLowerCase() == 'expires') {
			var expireDate = new Date(pair[1]); 
			if (expireDate < new Date()) { 
				return true;
			}
		}
	}
	return false; 
}

/* sendRequest 
 * Sends a request to the server 
 * 
 * 'method' The http method (e.g. get, post, delete)
 * 'url' The url 
 * 'params' Contains optional parameters such as body and headers 
 * 'callback' The callback which contains the response from the server 
 * 
 * Example 
 * client.sendRequest('GET', '/foo', { body: bar, header : foobar }, function(res) { }); 
 */ 
Client.prototype.sendRequest = function(method, url, params, callback) { 
	var result = {}; 
	
	// Default values 
	params.body = params.body || ''; 
	params.header = params.header || {}; 
	
	var request = this.client.request(method, url, params.header); 
	request.write(params.body); 
	request.end(); 
	
	request.on('response', function(res) {
		result['status'] = res.statusCode; 
		result['headers'] = res.headers;
		var resBody = ''; 
		 
		res.on('data', function(chunk) {
			resBody += chunk;
		});
		
		res.on('end', function(chunk) {
			result['body'] = resBody;
			callback(result); 
		}); 
	});
}

/* stringifyQuery
 * Serialize an object to a query string. Optionally override the space, seperator and assignment characters
 * 
 * 'space' The space character. Default is '+'. 
 * 'sep' The separator character. Default is '&'. 
 * 'eq' The assignment character. Default is '='. 
 */ 
Client.prototype.stringifyQuery = function(obj, space, sep, eq) { 
	space = space || '+'; 
	sep = sep || '&'; 
	eq = eq || '=';
	var str = querystring.stringify(obj, sep, eq); 
	return str.replace('%20', space);  
}
